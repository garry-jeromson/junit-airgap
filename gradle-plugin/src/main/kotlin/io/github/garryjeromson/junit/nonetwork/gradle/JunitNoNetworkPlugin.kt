package io.github.garryjeromson.junit.nonetwork.gradle

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.testing.Test
import org.gradle.kotlin.dsl.create
import org.gradle.kotlin.dsl.withType
import java.io.File

/**
 * Gradle plugin that automatically configures JUnit tests to block network requests.
 *
 * This plugin:
 * - Adds the junit-no-network library dependency to test configurations
 * - Creates junit-platform.properties for JUnit 5 automatic extension discovery
 * - Configures Test tasks with appropriate system properties
 * - Supports JVM, Android, and Kotlin Multiplatform projects
 *
 * Usage:
 * ```kotlin
 * plugins {
 *     id("io.github.garryjeromson.junit-no-network") version "0.1.0"
 * }
 *
 * junitNoNetwork {
 *     enabled = true
 *     applyToAllTests = true
 * }
 * ```
 */
class JunitNoNetworkPlugin : Plugin<Project> {
    override fun apply(project: Project) {
        // Create extension
        val extension = project.extensions.create<JunitNoNetworkExtension>("junitNoNetwork")

        // Configure after project evaluation
        project.afterEvaluate {
            if (!extension.enabled.get()) {
                project.logger.info("JUnit No-Network plugin is disabled")
                return@afterEvaluate
            }

            configureProject(project, extension)
        }
    }

    private fun configureProject(
        project: Project,
        extension: JunitNoNetworkExtension,
    ) {
        project.logger.lifecycle("Configuring JUnit No-Network plugin")

        // 1. Add library dependency
        addDependencies(project, extension)

        // 2. Configure JUnit Platform properties
        configureJunitPlatform(project, extension)

        // 3. Configure Test tasks
        configureTestTasks(project, extension)

        // 4. Handle Kotlin Multiplatform projects
        if (project.plugins.hasPlugin("org.jetbrains.kotlin.multiplatform")) {
            configureKmpProject(project, extension)
        }
    }

    private fun addDependencies(
        project: Project,
        extension: JunitNoNetworkExtension,
    ) {
        val version = extension.libraryVersion.get()

        // Determine which configurations to add the dependency to
        val configurations =
            when {
                project.plugins.hasPlugin("org.jetbrains.kotlin.multiplatform") -> {
                    // KMP project - dependencies are handled per source set
                    project.logger.info("Detected KMP project, dependencies will be added per source set")
                    emptyList()
                }

                project.plugins.hasPlugin("com.android.library") ||
                    project.plugins.hasPlugin("com.android.application") -> {
                    // Android project
                    listOf("testImplementation")
                }

                else -> {
                    // Regular JVM project
                    listOf("testImplementation")
                }
            }

        configurations.forEach { configName ->
            project.configurations.findByName(configName)?.let { _ ->
                project.dependencies.add(
                    configName,
                    "io.github.garryjeromson:junit-no-network:$version",
                )
                project.logger.info("Added junit-no-network:$version to $configName")
            }
        }
    }

    private fun configureJunitPlatform(
        project: Project,
        extension: JunitNoNetworkExtension,
    ) {
        // Create junit-platform.properties file
        val resourcesDir = project.file("src/test/resources")
        val propsFile = File(resourcesDir, "junit-platform.properties")

        // Create directory if it doesn't exist
        resourcesDir.mkdirs()

        // Generate properties content
        val properties =
            buildString {
                appendLine("# Generated by JUnit No-Network Gradle Plugin")
                appendLine("# Enable JUnit 5 automatic extension discovery")
                appendLine("junit.jupiter.extensions.autodetection.enabled=true")
                appendLine()
                appendLine("# Network blocking configuration")
                appendLine("junit.nonetwork.applyToAllTests=${extension.applyToAllTests.get()}")

                if (extension.debug.get()) {
                    appendLine("junit.nonetwork.debug=true")
                }
            }

        // Write properties file
        propsFile.writeText(properties)
        project.logger.lifecycle("Created junit-platform.properties at: ${propsFile.absolutePath}")
    }

    private fun configureTestTasks(
        project: Project,
        extension: JunitNoNetworkExtension,
    ) {
        project.tasks.withType<Test>().configureEach {
            // Configure system properties for the test JVM
            systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")
            systemProperty("junit.nonetwork.applyToAllTests", extension.applyToAllTests.get())

            if (extension.debug.get()) {
                systemProperty("junit.nonetwork.debug", "true")
            }

            project.logger.info("Configured test task: $name with network blocking")
        }
    }

    private fun configureKmpProject(
        project: Project,
        extension: JunitNoNetworkExtension,
    ) {
        val version = extension.libraryVersion.get()

        project.logger.info("Configuring KMP project for JUnit No-Network")

        // Access kotlin multiplatform extension
        val kotlin = project.extensions.findByName("kotlin") ?: return

        try {
            // Use reflection to access KMP DSL
            val sourceSets = kotlin.javaClass.getMethod("getSourceSets").invoke(kotlin)
            val getByName = sourceSets.javaClass.getMethod("getByName", String::class.java)

            // Configure jvmTest source set
            configureKmpSourceSet(project, getByName, sourceSets, "jvmTest", version, extension)

            // Configure androidUnitTest source set
            configureKmpSourceSet(project, getByName, sourceSets, "androidUnitTest", version, extension)
        } catch (e: Exception) {
            project.logger.warn("Could not configure KMP source sets: ${e.message}")
        }
    }

    private fun configureKmpSourceSet(
        project: Project,
        getByName: java.lang.reflect.Method,
        sourceSets: Any,
        sourceSetName: String,
        version: String,
        extension: JunitNoNetworkExtension,
    ) {
        try {
            val sourceSet = getByName.invoke(sourceSets, sourceSetName)
            val dependencies = sourceSet.javaClass.getMethod("getDependencies").invoke(sourceSet)
            val implementation = dependencies.javaClass.getMethod("implementation", Any::class.java)

            implementation.invoke(dependencies, "io.github.garryjeromson:junit-no-network:$version")

            project.logger.info("Added junit-no-network:$version to $sourceSetName")

            // Create platform-specific junit-platform.properties
            val resourcesDir = project.file("src/$sourceSetName/resources")
            val propsFile = File(resourcesDir, "junit-platform.properties")

            resourcesDir.mkdirs()

            val properties =
                buildString {
                    appendLine("# Generated by JUnit No-Network Gradle Plugin")
                    appendLine("junit.jupiter.extensions.autodetection.enabled=true")
                    appendLine("junit.nonetwork.applyToAllTests=${extension.applyToAllTests.get()}")
                }

            propsFile.writeText(properties)
            project.logger.lifecycle("Created junit-platform.properties for $sourceSetName")
        } catch (e: Exception) {
            // Source set doesn't exist, skip it
            project.logger.debug("Source set $sourceSetName not found: ${e.message}")
        }
    }
}
